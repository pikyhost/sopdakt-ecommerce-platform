<?php

namespace App\Filament\Resources;

use App\Filament\Resources\BundleResource\Pages;
use App\Models\Bundle;
use Filament\Forms;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Resources\Concerns\Translatable;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;

class BundleResource extends Resource
{
    use Translatable;

    protected static ?string $model = Bundle::class;

    protected static ?string $navigationIcon = 'heroicon-o-bolt';

    protected static ?int $navigationSort = 3;


    public static function getNavigationLabel(): string
    {
        return __('bundles.label'); // TODO: Change the autogenerated stub
    }

    public static function getNavigationGroup(): ?string
    {
        return __('Products Management'); //Products Attributes Management
    }

    public static function getModelLabel(): string
    {
        return __('bundles.label'); // TODO: Change the autogenerated stub
    }

    /**
     * @return string|null
     */
    public static function getPluralLabel(): ?string
    {
        return __('bundles.label'); // TODO: Change the autogenerated stub
    }

    public static function getLabel(): ?string
    {
        return __('bundles.label'); // TODO: Change the autogenerated stub
    }

    public static function getPluralModelLabel(): string
    {
        return __('bundles.label');
    }

    protected static function calculateDiscountPrice(?Get $get)
    {
        if ($get && $get('bundle_type') === 'buy_x_get_y' && $get('buy_x') && $get('get_y')) {
            $productIds = $get('products') ?? []; // Get selected product(s)
            $productId = is_array($productIds) ? reset($productIds) : $productIds; // Ensure we get the first product ID

            if (!$productId) {
                return null; // No product selected, return null
            }

            $product = \App\Models\Product::find($productId); // Fetch product from DB

            if ($product) {
                $buyX = floatval($get('buy_x')) ?: 1;
                $pricePerUnit = floatval($product->discount_price_for_current_country);
                return $buyX * $pricePerUnit;
            }
        }

        return null;
    }

    protected static function updateDiscountPrice(Set $set, Get $get)
    {
        if ($get('bundle_type') === 'buy_x_get_y' && $get('buy_x') && $get('get_y')) {
            $discountPrice = self::calculateDiscountPrice($get);
            $set('discount_price', $discountPrice);
        }
    }


    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Tabs::make()
                    ->columnSpanFull()
                    ->tabs([
                        // General Information Tab
                        Forms\Components\Tabs\Tab::make(__('bundles.general_information'))
                            ->columnSpanFull()
                            ->schema([
                                TextInput::make('name')
                                    ->label(__('bundles.name'))
                                    ->required(),

                                TextInput::make('name_for_admin')
                                    ->label(__('bundles.name_for_admin'))
                                    ->required(),

                                Select::make('bundle_type')
                                    ->live()
                                    ->label(__('bundles.type'))
                                    ->options([
                                        'fixed_price' => __('bundles.type.fixed_price'),
                                        'buy_x_get_y' => __('bundles.type.buy_x_get_y'),
                                    ])
                                    ->required(),

                                Select::make('products')
                                    ->maxItems(fn (Get $get) => ($get('bundle_type') instanceof \App\Enums\BundleType
                                        ? $get('bundle_type')->value
                                        : $get('bundle_type')) === 'fixed_price' ? 10 : 1
                                    )
                                    ->searchable()
                                    ->preload()
                                    ->label(__('bundles.products'))
                                    ->multiple()
                                    ->relationship('products', 'name'),

                                TextInput::make('buy_x')
                                    ->live()
                                    ->label(__('bundles.buy_x'))
                                    ->numeric()
                                    ->visible(fn ($get) => $get('bundle_type') === 'buy_x_get_y')
                                    ->afterStateUpdated(fn (Set $set, Get $get) => self::updateDiscountPrice($set, $get)),

                                TextInput::make('get_y')
                                    ->live()
                                    ->label(__('bundles.get_y_free'))
                                    ->numeric()
                                    ->visible(fn ($get) => $get('bundle_type') === 'buy_x_get_y')
                                    ->afterStateUpdated(fn (Set $set, Get $get) => self::updateDiscountPrice($set, $get)), // Ensure discount updates

                                TextInput::make('discount_price')
                                    ->live()
                                    ->label(__('bundles.discount_price'))
                                    ->numeric()
                                    ->visible(fn ($get) => $get('bundle_type')) // Always visible
                                    ->disabled(fn ($get) => $get('bundle_type') === 'buy_x_get_y' && $get('buy_x') !== null && $get('get_y') !== null)
                                    ->default(fn (Get $get) => self::calculateDiscountPrice($get)) // Set default value for database
                                    ->afterStateHydrated(fn (Set $set, Get $get) => $set('discount_price', self::calculateDiscountPrice($get))) // Ensure correct value is loaded
                                    ->dehydrated(fn ($get) => $get('bundle_type') === 'buy_x_get_y'),
        ]),

                        // Special Prices Tab
                        Forms\Components\Tabs\Tab::make(__('bundles.special_prices'))
                            ->schema([
                                Forms\Components\Repeater::make('specialPrices')
                                    ->defaultItems(0)
                                    ->label(__('bundles.special_prices'))
                                    ->relationship('specialPrices')
                                    ->columns(2)
                                    ->schema([
                                        Forms\Components\Placeholder::make('country_or_group_info')
                                            ->label(__('country_or_group_info'))
                                            ->content(__('messages.select_country_or_group'))
                                            ->columnSpanFull(),

                                        Forms\Components\Select::make('country_id')
                                            ->label(__('fields.select_country'))
                                            ->relationship('country', 'name')
                                            ->nullable()
                                            ->live()
                                            ->afterStateUpdated(fn (Forms\Set $set) => $set('country_group_id', null))
                                            ->hidden(fn (Forms\Get $get) => filled($get('country_group_id')))
                                            ->disableOptionsWhenSelectedInSiblingRepeaterItems(),

                                        Forms\Components\Select::make('country_group_id')
                                            ->label(__('fields.select_country_group'))
                                            ->relationship('countryGroup', 'name')
                                            ->preload()
                                            ->createOptionForm([
                                                Forms\Components\TextInput::make('name')
                                                    ->label(__('name'))
                                                    ->required()
                                                    ->maxLength(255),
                                                Forms\Components\Select::make('countries')
                                                    ->label(__('countries'))
                                                    ->relationship('countries', 'name')
                                                    ->multiple()
                                                    ->searchable()
                                                    ->preload(),
                                            ])
                                            ->nullable()
                                            ->live()
                                            ->afterStateUpdated(fn (Forms\Set $set) => $set('country_id', null))
                                            ->hidden(fn (Forms\Get $get) => filled($get('country_id')))
                                            ->disableOptionsWhenSelectedInSiblingRepeaterItems(),

                                        Forms\Components\Select::make('currency_id')
                                            ->label(__('fields.currency'))
                                            ->relationship('currency', 'name')
                                            ->required(),

                                        Forms\Components\TextInput::make('special_price')
                                            ->label(__('bundles.special_price'))
                                            ->numeric()
                                            ->required(),

                                        Forms\Components\TextInput::make('special_price_after_discount')
                                            ->lt('special_price')
                                            ->label(__('bundles.after_discount_price'))
                                            ->numeric()
                                            ->nullable(),
                                    ])->columnSpanFull(),
                            ]),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->label(__('bundles.name'))
                    ->searchable(),  //name_for_admin

                Tables\Columns\TextColumn::make('name_for_admin')
                    ->label(__('bundles.name_for_admin'))
                    ->searchable(),  //name_for_admin

                Tables\Columns\TextColumn::make('products.name')
                    ->label(__('bundles.products'))
                    ->placeholder('-')
                    ->limitList(2)
                    ->badge(),
                Tables\Columns\TextColumn::make('bundle_type')
                    ->badge()
                    ->label(__('bundles.type')),
                Tables\Columns\TextColumn::make('discount_price')
                    ->placeholder('-')
                    ->label(__('bundles.discount_price'))
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('buy_x')
                    ->placeholder('-')
                    ->label(__('bundles.buy_x'))
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('get_y')
                    ->label(__('bundles.get_y_free'))
                    ->numeric()
                    ->sortable()
                    ->placeholder(fn ($record) => $record->buy_x ? __('bundles.discount_price') : '-'),

                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ManageBundles::route('/'),
        ];
    }
}
