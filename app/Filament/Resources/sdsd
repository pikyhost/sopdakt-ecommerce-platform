<?php

namespace App\Filament\Resources;

use App\Filament\Resources\CategoryResource\Pages;
use App\Models\Category;
use Closure;
use CodeWithDennis\FilamentSelectTree\SelectTree;
use Filament\Forms\Components\Checkbox;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Infolists\Components\SpatieMediaLibraryImageEntry;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Concerns\Translatable;
use Filament\Resources\Resource;
use Filament\Support\Enums\ActionSize;
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Columns\SpatieMediaLibraryImageColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Enums\FiltersLayout;
use Filament\Tables\Table;
use Illuminate\Validation\Rule;

class ACategoryResource extends Resource
{
    use Translatable;

    protected static ?string $model = Category::class;

    protected static ?string $navigationIcon = 'heroicon-o-at-symbol';

    protected static ?int $navigationSort = 7;

    public static function getNavigationLabel(): string
    {
        return __('category.label'); // TODO: Change the autogenerated stub
    }

    public static function getNavigationGroup(): ?string
    {
        return __('Products Management'); //Products Management
    }

    public static function getModelLabel(): string
    {
        return __('category.label'); // TODO: Change the autogenerated stub
    }

    /**
     * @return string|null
     */
    public static function getPluralLabel(): ?string
    {
        return __('category.label'); // TODO: Change the autogenerated stub
    }

    public static function getLabel(): ?string
    {
        return __('category.label'); // TODO: Change the autogenerated stub
    }

    public static function getPluralModelLabel(): string
    {
        return __('category.label'); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form->schema([
            SpatieMediaLibraryFileUpload::make('main_category_image')
                ->label(__('image'))
                ->columnSpanFull()
                ->collection('main_category_image'),
            TextInput::make('name')
                ->label(__('category.name'))
                ->required()
                ->unique(ignoreRecord: true)
                ->maxLength(255),

            TextInput::make('slug')
                ->label(__('category.slug'))
                ->unique(ignoreRecord: true)
                ->maxLength(255),

            // SelectTree field for selecting parent category
            SelectTree::make('parent_id')
                ->enableBranchNode()
                ->label(__('category.parent'))
                ->relationship('parent', 'name', 'parent_id')
                ->placeholder(__('Please select a main category'))
                ->enableBranchNode()
                ->rules([
                    fn (Get $get): Closure => function (string $attribute, $value, Closure $fail) use ($get) {
                        if ($value === $get('id')) {
                            $fail(__('A category cannot be its own main.'));
                        }
                    },
                ])
                ->validationAttribute(__('Parent Category')),

            TextInput::make('meta_title')
                ->label(__('category.meta_title'))
                ->maxLength(255),

            TextInput::make('meta_description')
                ->columnSpanFull()
                ->label(__('category.meta_description'))
                ->maxLength(500),

            Textarea::make('description')
                ->label(__('category.description'))
                ->columnSpanFull()
                ->maxLength(500),

            Checkbox::make('is_published')
                ->default(true)
                ->label(__('category.is_published')),
        ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns(self::getTableColumns())
            ->filtersLayout(FiltersLayout::Modal)
            ->filtersFormColumns(4)
            ->actions(self::getTableActions())
            ->bulkActions(self::getTableBulkActions());
    }

    private static function getTableColumns(): array
    {
        return [
            TextColumn::make('id')
                ->label(__('category.id'))
                ->searchable()
                ->sortable(),

            SpatieMediaLibraryImageColumn::make('main_category_image')
                ->label(__('image'))
                ->collection('main_category_image'),

            TextColumn::make('name')
                ->label(__('category.name'))
                ->searchable()
                ->sortable(),

            TextColumn::make('slug')
                ->label(__('category.slug'))
                ->searchable(),

            TextColumn::make('parent.name')
                ->badge()
                ->label(__('category.parent'))
                ->searchable(),

            TextColumn::make('description')
                ->label(__('category.description'))
                ->limit(20),

            IconColumn::make('is_published')
                ->boolean()
                ->label(__('category.is_published')),

            TextColumn::make('created_at')
                ->toggleable(isToggledHiddenByDefault: true)
                ->label(__('category.created_at'))
                ->dateTime()
                ->sortable(),

            TextColumn::make('updated_at')
                ->toggleable(isToggledHiddenByDefault: true)
                ->label(__('category.updated_at'))
                ->dateTime()
                ->sortable(),
        ];
    }

    private static function getTableActions(): array
    {
        return [
            ActionGroup::make([
                ViewAction::make(),
                EditAction::make()->color('primary'),
                DeleteAction::make(),
            ])
                ->label(__('category.actions'))
                ->icon('heroicon-m-ellipsis-vertical')
                ->size(ActionSize::Small)
                ->color('primary')
                ->button(),
        ];
    }

    private static function getTableBulkActions(): array
    {
        return [
            BulkActionGroup::make([
                DeleteBulkAction::make(),
            ]),
        ];
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist->schema(self::getInfolistSchema())->columns(1)->inlineLabel();
    }

    private static function getInfolistSchema(): array
    {
        return [
            SpatieMediaLibraryImageEntry::make('main_category_image')
                ->hidden(fn($record) => !$record || !$record->getMainCategoryImageUrl())
                ->collection('main_category_image'),

            TextEntry::make('id')->label(__('category.id')),
            TextEntry::make('name')->label(__('category.name')),
            TextEntry::make('slug')->label(__('category.slug')),
            TextEntry::make('parent.name')->label(__('category.parent')),
            TextEntry::make('description')->label(__('category.description')),
            TextEntry::make('meta_title')->label(__('category.meta_title')),
            TextEntry::make('meta_description')->label(__('category.meta_description')),
            TextEntry::make('meta_keywords')->label(__('category.meta_keywords')),
            TextEntry::make('meta_robots')->label(__('category.meta_robots')),
            TextEntry::make('is_published')
                ->label(__('category.is_published')),

            TextEntry::make('created_at')->label(__('category.created_at'))->dateTime(),
            TextEntry::make('updated_at')->label(__('category.updated_at'))->dateTime(),
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ManageCategories::route('/'),
        ];
    }
}
