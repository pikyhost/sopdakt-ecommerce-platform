<?php

namespace App\Filament\Resources;

use App\Filament\Resources\ProductResource\Pages;
use App\Models\Product;
use App\Models\ProductColor;
use App\Services\ProductActionsService;
use CodeWithDennis\FilamentSelectTree\SelectTree;
use Filament\Forms;
use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\Fieldset;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\KeyValue;
use Filament\Forms\Components\MarkdownEditor;
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;
use Filament\Forms\Components\Tabs;
use Filament\Forms\Components\Tabs\Tab;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Form;
use Filament\Resources\Concerns\Translatable;
use Filament\Resources\Resource;
use Filament\Support\Enums\ActionSize;
use Filament\Tables;
use Filament\Tables\Columns\SpatieMediaLibraryImageColumn;
use Filament\Tables\Table;
use Mokhosh\FilamentRating\Components\Rating;

class ProductResource extends Resource
{
    use Translatable;

    protected static ?string $model = Product::class;

    protected static ?int $navigationSort = 1;

    protected static ?string $navigationIcon = 'heroicon-o-squares-2x2';

    public static function getNavigationLabel(): string
    {
        return __('product.label'); // TODO: Change the autogenerated stub
    }

    public static function getNavigationGroup(): ?string
    {
        return __('Products Management'); //Products Attributes Management
    }

    public static function getModelLabel(): string
    {
        return __('product.label'); // TODO: Change the autogenerated stub
    }

    /**
     * @return string|null
     */
    public static function getPluralLabel(): ?string
    {
        return __('product.label'); // TODO: Change the autogenerated stub
    }

    public static function getLabel(): ?string
    {
        return __('product.label'); // TODO: Change the autogenerated stub
    }

    public static function getPluralModelLabel(): string
    {
        return __('product.label');
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Tabs::make('Product Tabs')
                    ->tabs([
                        // General Information Tab
                        Tab::make(__('General Information'))
                            ->icon('heroicon-o-information-circle')
                            ->schema([
                                SelectTree::make('category_id')
                                    ->enableBranchNode()
                                    ->label(__('_category'))
                                    ->relationship('category', 'name', 'parent_id')
                                    ->placeholder(__('Please select a category'))
                                    ->required(),
                                TextInput::make('name')
                                    ->label(__('Product Name'))
                                    ->required()
                                    ->maxLength(255),

                                TextInput::make('slug')
                                    ->unique(ignoreRecord: true)
                                    ->label(__('Slug'))
                                    ->required()
                                    ->maxLength(255),
                            ]),

                        // Pricing & Stock Tab
                        Tab::make(__('Stock & Pricing'))
                            ->columns(2)
                            ->icon('heroicon-o-currency-dollar')
                            ->schema([
                                TextInput::make('sku')
                                    ->label(__('SKU'))
                                    ->unique(ignoreRecord: true)
                                    ->required()
                                    ->maxLength(255),
                                Forms\Components\TextInput::make('quantity')
                                    ->label(__('Quantity'))
                                    ->required()
                                    ->numeric()
                                    ->default(0),
                                TextInput::make('price')
                                    ->label(__('Price'))
                                    ->required()
                                    ->numeric(),
                                TextInput::make('after_discount_price')
                                    ->lt('price')
                                    ->label(__('After Discount Price'))
                                    ->numeric(),
                                DateTimePicker::make('discount_start')
                                    ->requiredWith('after_discount_price')
                                    ->afterOrEqual('today')
                                    ->label(__('Discount Start'))
                                    ->nullable(),

                                DateTimePicker::make('discount_end')
                                    ->requiredWith('after_discount_price')
                                    ->after('discount_start')
                                    ->label(__('Discount End'))
                                    ->nullable(),
                            ]),

                        Tabs\Tab::make(__('tabs.special_prices'))
                            ->label(__('tabs.special_prices'))
                            ->icon('heroicon-o-flag') // banknotes
                            ->schema([
                                Repeater::make('specialPrices')
                                    ->label(__('tabs.special_prices'))
                                    ->relationship('specialPrices')
                                    ->columns(2)
                                    ->schema([
                                        Placeholder::make('country_or_group_info')
                                            ->label(__('country_or_group_info'))
                                            ->content(__('messages.select_country_or_group'))
                                            ->columnSpanFull(),

                                        Select::make('country_id')
                                            ->label(__('fields.select_country'))
                                            ->relationship('country', 'name')
                                            ->nullable()
                                            ->live()
                                            ->afterStateUpdated(fn (Forms\Set $set) => $set('country_group_id', null))
                                            ->hidden(fn (Forms\Get $get) => filled($get('country_group_id')))
                                            ->disableOptionsWhenSelectedInSiblingRepeaterItems(),

                                        Select::make('country_group_id')
                                            ->label(__('fields.select_country_group'))
                                            ->relationship('countryGroup', 'name')
                                            ->preload()
                                            ->createOptionForm([
                                                Forms\Components\TextInput::make('name')
                                                    ->label(__('name'))
                                                    ->required()
                                                    ->maxLength(255),

                                                Forms\Components\Select::make('countries')
                                                    ->label(__('countries'))
                                                    ->relationship('countries', 'name')
                                                    ->multiple()
                                                    ->searchable()
                                                    ->preload(),
                                            ])
                                            ->nullable()
                                            ->live()
                                            ->afterStateUpdated(fn (Forms\Set $set) => $set('country_id', null))
                                            ->hidden(fn (Forms\Get $get) => filled($get('country_id')))
                                            ->disableOptionsWhenSelectedInSiblingRepeaterItems(),

                                        Select::make('currency_id')
                                            ->label(__('fields.currency'))
                                            ->relationship('currency', 'name')
                                            ->required(),

                                        TextInput::make('special_price')
                                            ->label(__('Price'))
                                            ->numeric()
                                            ->required(),

                                        TextInput::make('special_price_after_discount')
                                            ->lt('special_price')
                                            ->label(__('After Discount Price'))
                                            ->numeric()
                                            ->nullable(),
                                    ])->columnSpanFull(),
                            ]),
                        Tab::make(__('Features'))
                            ->columns(2)
                            ->icon('heroicon-o-table-cells')
                            ->schema([
                                Select::make('labels')
                                    ->label(__('labels.plural_label'))
                                    ->createOptionForm([
                                        Forms\Components\TextInput::make('title')
                                            ->label(__('fields.text_title'))
                                            ->columnSpanFull(),
                                        Forms\Components\TextInput::make('color')
                                            ->label(__('fields.text_color')),
                                        Forms\Components\ColorPicker::make('color_code')
                                            ->label(__('fields.text_color_code')),
                                        Forms\Components\TextInput::make('background_color')
                                            ->label(__('fields.background_color')),
                                        Forms\Components\ColorPicker::make('background_color_code')
                                            ->label(__('fields.background_color_code')),
                                    ])
                                    ->multiple()
                                    ->label(__('labels'))
                                    ->relationship('labels', 'title')
                                    ->searchable()
                                    ->preload()
                                    ->nullable(),

                                Select::make('sizes')
                                    ->multiple()
                                    ->label(__('Sizes'))
                                    ->relationship('sizes', 'name')
                                    ->searchable()
                                    ->preload(),

                                Repeater::make('colorsWithImages')
                                    ->columnSpanFull()
                                    ->relationship('colorsWithImages') // Uses the hasMany relationship
                                    ->label(__('Colors'))
                                    ->schema([
                                        Select::make('color_id')
                                            ->label(__('Color'))
                                            ->relationship('color', 'name') // Fetch color names
                                            ->required(),

                                        FileUpload::make('image')
                                            ->label(__('Image_'))
                                            ->required(),
                                    ])
                                    ->collapsible(),

                                Forms\Components\Section::make(__('Attributes'))
                                    ->schema([
                                        Select::make('attributes')
                                            ->label(__('Select Predefined Attributes'))
                                            ->multiple()
                                            ->relationship('attributes', 'name')
                                            ->preload()
                                            ->createOptionForm([
                                                TextInput::make('name')
                                                    ->columnSpanFull()
                                                    ->label(__('Attribute Name'))
                                                    ->required(),

                                                Textarea::make('description')
                                                    ->columnSpanFull()
                                                    ->label(__('Description'))
                                                    ->nullable(),

                                                Select::make('type')
                                                    ->columnSpanFull()
                                                    ->label(__('attributes.type'))
                                                    ->options([
                                                        'boolean' => __('attributes.type.boolean'),
                                                        'select' => __('attributes.type.select'),
                                                        'text' => __('attributes.type.text'),
                                                    ])
                                                    ->live()
                                                    ->required(),

                                                Toggle::make('default_value')
                                                    ->columnSpanFull()
                                                    ->label(__('Default Value (for Boolean)'))
                                                    ->visible(fn ($get) => $get('type') === 'boolean'),

                                                KeyValue::make('values')
                                                ->columnSpanFull()
                                                    ->label(__('Attribute Values (for Select type)'))
                                                    ->visible(fn ($get) => $get('type') === 'select')
                                                    ->addActionLabel(__('Add Option')),

                                                TextInput::make('default_value')
                                                ->columnSpanFull()
                                                    ->label(__('Default Value (for Text)'))
                                                    ->visible(fn ($get) => $get('type') === 'text'),
                                            ]),

                                        KeyValue::make('custom_attributes')
                                            ->label(__('Custom Attributes'))
                                            ->addActionLabel(__('Add Custom Attribute'))
                                    ]),
                            ]),

                        // Media Tab
                        Tab::make(__('Media'))
                            ->icon('heroicon-o-photo')
                            ->schema([
                                SpatieMediaLibraryFileUpload::make('feature_product_image')
                                    ->label(__('Feature Image'))
                                    ->required()
                                    ->collection('feature_product_image')
                                    ->image()
                                    ->maxSize(5120),

                                SpatieMediaLibraryFileUpload::make('second_feature_product_image')
                                    ->label(__('Second Feature Image'))
                                    ->required()
                                    ->collection('second_feature_product_image')
                                    ->image()
                                    ->maxSize(5120),

                                SpatieMediaLibraryFileUpload::make('sizes_image')
                                    ->label(__('Size Guide Image'))
                                    ->required()
                                    ->collection('sizes_image')
                                    ->image()
                                    ->maxSize(5120),

                                SpatieMediaLibraryFileUpload::make('more_product_images_and_videos')
                                    ->maxFiles(20)
                                    ->label(__('Extra Images and Videos'))
                                    ->columnSpanFull()
                                    ->collection('more_product_images_and_videos')
                                    ->multiple()
                                    ->acceptedFileTypes(['video/mp4', 'video/mpeg', 'video/quicktime',
                                        'image/jpeg', 'image/png', 'image/webp'])
                                    ->imageEditor()
                                    ->reorderable(),
                            ]),


                        // SEO Tab
                        Tab::make(__('SEO'))
                            ->columns(2)
                            ->icon('heroicon-o-globe-alt') //banknotes
                            ->schema([
                                TextInput::make('meta_title')
                                    ->label(__('Meta Title'))
                                    ->maxLength(255),
                                TextInput::make('meta_description')
                                    ->label(__('Meta Description'))
                                    ->maxLength(255),
                            ]),

                        // Bundles Tab
                        Tab::make(__('bundles.title'))
                            ->columns(2)
                            ->icon('heroicon-o-bolt')
                            ->schema([
                                Select::make('bundles')
                                    ->columnSpanFull()
                                    ->label(__('bundles.select'))
                                    ->multiple()
                                    ->relationship('bundles', 'name')
                                    ->preload()
                                    ->createOptionForm([
                                        TextInput::make('name')
                                            ->label(__('bundles.name'))
                                            ->required(),

                                        TextInput::make('name_for_admin')
                                            ->label(__('bundles.name_for_admin'))
                                            ->required(),

                                        Select::make('bundle_type')
                                            ->live()
                                            ->label(__('bundles.type'))
                                            ->options([
                                                'fixed_price' => __('bundles.type.fixed_price'),
                                                'discount_percentage' => __('bundles.type.discount_percentage'),
                                                'buy_x_get_y' => __('bundles.type.buy_x_get_y'),
                                            ])
                                            ->required(),

                                        TextInput::make('discount_price')
                                            ->live()
                                            ->label(__('bundles.discount_price'))
                                            ->numeric()
                                            ->visible(fn ($get) => $get('bundle_type') == 'fixed_price' || 'buy_x_get_y'),

                                        TextInput::make('discount_percentage')
                                            ->live()
                                            ->label(__('bundles.discount_percentage'))
                                            ->numeric()
                                            ->visible(fn ($get) => $get('bundle_type') == 'discount_percentage'),

                                        TextInput::make('buy_x')
                                            ->live()
                                            ->label(__('bundles.buy_x'))
                                            ->numeric()
                                            ->visible(fn ($get) => $get('bundle_type') === 'buy_x_get_y'),

                                        TextInput::make('get_y')
                                            ->live()
                                            ->label(__('bundles.get_y_free'))
                                            ->numeric()
                                            ->visible(fn ($get) => $get('bundle_type') === 'buy_x_get_y'  &&
                                                !$get('discount_price')),

                                        Select::make('products')
                                            ->label(__('bundles.products'))
                                            ->multiple()
                                            ->relationship('products', 'name')
                                            ->preload(),

                                        // Special Prices for Bundles
                                        Repeater::make('specialPrices')
                                            ->label(__('bundles.special_prices'))
                                            ->relationship('specialPrices')
                                            ->columns(2)
                                            ->schema([
                                                Placeholder::make('country_or_group_info')
                                                    ->label(__('country_or_group_info'))
                                                    ->content(__('messages.select_country_or_group'))
                                                    ->columnSpanFull(),

                                                Select::make('country_id')
                                                    ->label(__('fields.select_country'))
                                                    ->relationship('country', 'name')
                                                    ->nullable()
                                                    ->live()
                                                    ->afterStateUpdated(fn (Forms\Set $set) => $set('country_group_id', null))
                                                    ->hidden(fn (Forms\Get $get) => filled($get('country_group_id')))
                                                    ->disableOptionsWhenSelectedInSiblingRepeaterItems(),

                                                Select::make('country_group_id')
                                                    ->label(__('fields.select_country_group'))
                                                    ->relationship('countryGroup', 'name')
                                                    ->preload()
                                                    ->createOptionForm([
                                                        Forms\Components\TextInput::make('name')
                                                            ->label(__('name'))
                                                            ->required()
                                                            ->maxLength(255),

                                                        Forms\Components\Select::make('countries')
                                                            ->label(__('countries'))
                                                            ->relationship('countries', 'name')
                                                            ->multiple()
                                                            ->searchable()
                                                            ->preload(),
                                                    ])
                                                    ->nullable()
                                                    ->live()
                                                    ->afterStateUpdated(fn (Forms\Set $set) => $set('country_id', null))
                                                    ->hidden(fn (Forms\Get $get) => filled($get('country_id')))
                                                    ->disableOptionsWhenSelectedInSiblingRepeaterItems(),

                                                Select::make('currency_id')
                                                    ->label(__('fields.currency'))
                                                    ->relationship('currency', 'name')
                                                    ->required(),

                                                TextInput::make('special_price')
                                                    ->label(__('bundles.special_price'))
                                                    ->numeric()
                                                    ->required(),

                                                TextInput::make('special_price_after_discount')
                                                    ->lt('special_price')
                                                    ->label(__('bundles.after_discount_price'))
                                                    ->numeric()
                                                    ->nullable(),
                                            ])->columnSpanFull(),
                                    ]),
                            ]),

                        // Additional Info Tab
                        Tab::make(__('Additional Info'))
                            ->columns(3)
                            ->icon('heroicon-o-plus-circle')
                            ->schema([
                                Rating::make('fake_average_rating')
                                   ->required()
                                    ->columnSpanFull()
                                    ->live()
                                    ->allowZero()
                                    ->label(__('Rating')),
                                TextInput::make('views')
                                    ->label(__('Views'))
                                    ->numeric()
                                    ->default(0),
                                TextInput::make('sales')
                                    ->label(__('Sales'))
                                    ->numeric()
                                    ->default(0),

                                Textarea::make('summary')
                                    ->columnSpanFull()
                                    ->nullable()
                                    ->label(__('Small description')),

                                MarkdownEditor::make('description')
                                    ->columnSpanFull()
                                    ->label(__('Description'))
                                    ->columnSpanFull(),
                                Forms\Components\Checkbox::make('is_published')
                                    ->columnSpanFull()
                                    ->default(true)
                                    ->label(__('Is Published?'))
                                    ->required(),
                                Forms\Components\Checkbox::make('is_featured')
                                    ->columnSpanFull()
                                    ->label(__('Is Featured?'))
                                    ->required(),
                            ])->columns(2),
                    ])
                    ->columnSpanFull()
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('id')->label(__('id')),

                Tables\Columns\SpatieMediaLibraryImageColumn::make('feature_product_image')
                    ->placeholder('-')
                    ->collection('feature_product_image')
                    ->label(__('products.Product Image')),

                Tables\Columns\SpatieMediaLibraryImageColumn::make('sizes_image')
                    ->placeholder('-')
                    ->collection('sizes_image')
                    ->label(__('Sizes Image')),

                SpatieMediaLibraryImageColumn::make('second_feature_product_image')
                    ->placeholder('-')
                    ->label(__('Second Feature Image'))
                    ->simpleLightbox()
                    ->circular()
                    ->stacked()
                    ->limit(3)
                    ->limitedRemainingText(isSeparate: true)
                    ->collection('more_product_images'),

                Tables\Columns\TextColumn::make('user.name')
                    ->label(__('products.User')),

                Tables\Columns\TextColumn::make('category.name')
                    ->label(__('products.Category'))
                    ->numeric()
                    ->sortable(),

                Tables\Columns\TextColumn::make('label.title')
                    ->label(__('label')),

                Tables\Columns\TextColumn::make('name')
                    ->label(__('products.Product Name'))
                    ->searchable(),

                Tables\Columns\TextColumn::make('summary')
                    ->placeholder('-')
                    ->label(__('Small description'))
                    ->searchable(),

                Tables\Columns\TextColumn::make('price')
                    ->label(__('products.Price'))
                    ->money()
                    ->sortable(),

                Tables\Columns\TextColumn::make('quantity')
                    ->label(__('Quantity'))
                    ->numeric()
                    ->sortable(),

                Tables\Columns\TextColumn::make('sku')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('SKU')),

                Tables\Columns\TextColumn::make('colors.name')
                    ->placeholder('-')
                    ->label(__('Colors'))
                    ->limitList(2)
                    ->badge(),

                Tables\Columns\TextColumn::make('sizes.name')
                    ->placeholder('-')
                    ->label(__('Sizes'))
                    ->limitList(2)
                    ->badge(),

                Tables\Columns\TextColumn::make('slug')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.Slug'))
                    ->searchable(),

                Tables\Columns\TextColumn::make('meta_title')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.Meta Title'))
                    ->searchable(),

                Tables\Columns\TextColumn::make('meta_description')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.Meta Description'))
                    ->searchable(),

                Tables\Columns\TextColumn::make('after_discount_price')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.After Discount Price'))
                    ->numeric()
                    ->sortable(),

                Tables\Columns\TextColumn::make('discount_start')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.Discount Start'))
                    ->dateTime()
                    ->sortable(),

                Tables\Columns\TextColumn::make('discount_end')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.Discount End'))
                    ->dateTime()
                    ->sortable(),

                Tables\Columns\TextColumn::make('views')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.Views'))
                    ->numeric()
                    ->sortable(),

                Tables\Columns\TextColumn::make('sales')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.Sales'))
                    ->numeric()
                    ->sortable(),

                Tables\Columns\TextColumn::make('fake_average_rating')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.Rating'))
                    ->numeric()
                    ->sortable(),

                Tables\Columns\IconColumn::make('is_published')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->default(true)
                    ->label(__('products.Is Published'))
                    ->boolean(),

                Tables\Columns\IconColumn::make('is_featured')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->label(__('products.Is Featured'))
                    ->boolean(),

                Tables\Columns\TextColumn::make('created_at')
                    ->label(__('products.Created At'))
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),

                Tables\Columns\TextColumn::make('updated_at')
                    ->label(__('products.Updated At'))
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->actions([
                Tables\Actions\ActionGroup::make(
                    array_merge([
                        Tables\Actions\EditAction::make(),
                        Tables\Actions\DeleteAction::make(),
                    ], ProductActionsService::getActions())
                ) ->label(__('Actions'))
                    ->icon('heroicon-m-ellipsis-vertical')
                    ->size(ActionSize::Small)
                    ->color('primary')
                    ->button(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }


    public static function getPages(): array
    {
        return [
            'index' => Pages\ListProducts::route('/'),
            'create' => Pages\CreateProduct::route('/create'),
            'edit' => Pages\EditProduct::route('/{record}/edit'),
        ];
    }
}
