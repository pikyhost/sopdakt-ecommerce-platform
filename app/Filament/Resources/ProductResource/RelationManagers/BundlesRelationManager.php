<?php

namespace App\Filament\Resources\ProductResource\RelationManagers;

use Filament\Resources\RelationManagers\Concerns\Translatable;
use Filament\Resources\RelationManagers\RelationManager;
use Closure;
use Filament\Forms;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Model;
use Livewire\Attributes\Reactive;

class BundlesRelationManager extends RelationManager
{
    use Translatable;

    protected static string $relationship = 'bundles';

    #[Reactive]
    public ?string $activeLocale = null;

    protected static bool $isLazy = false;

    /**
     * @param Model $ownerRecord
     * @param string $pageClass
     * @return string
     */
    public static function getTitle(Model $ownerRecord, string $pageClass): string
    {
        return __('bundles.label'); // TODO: Change the autogenerated stub
    }

    protected static function getModelLabel(): ?string
    {
        return __('bundles.label'); // TODO: Change the autogenerated stub
    }

    protected static function getPluralModelLabel(): ?string
    {
        return __('bundles.label'); // TODO: Change the autogenerated stub
    }

    protected static function getPluralRecordLabel(): ?string
    {
        return __('bundles.label'); // TODO: Change the autogenerated stub
    }

    protected function updateDiscountPrice(Set $set, Get $get)
    {
        if ($get('bundle_type') === 'buy_x_get_y' && $get('buy_x') !== null && $get('get_y') !== null) {
            $productId = $this->getOwnerRecord()->id;
            $product = \App\Models\Product::find($productId);

            if ($product) {
                $buyX = floatval($get('buy_x')) ?: 1;
                $pricePerUnit = floatval($product->discount_price_for_current_country);
                $discountPrice = $buyX * $pricePerUnit;

                $set('discount_price', $discountPrice);
            }
        } else {
            // Reset discount price if conditions are not met
            $set('discount_price', null);
        }
    }

    protected function handleDiscountUpdated(Set $set, Get $get)
    {
        // If discount_price is manually set in fixed price mode, reset buy_x and get_y
        if ($get('bundle_type') === 'fixed_price' && $get('discount_price') !== null) {
            $set('buy_x', null);
            $set('get_y', null);
        }
    }


    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Tabs::make()
                    ->columnSpanFull()
                    ->tabs([
                        // General Information Tab
                        Forms\Components\Tabs\Tab::make(__('bundles.general_information'))
                            ->columnSpanFull()
                            ->schema([
                                TextInput::make('name')
                                    ->label(__('bundles.name'))
                                    ->required(),

                                TextInput::make('name_for_admin')
                                    ->label(__('bundles.name_for_admin'))
                                    ->required(),

                                Select::make('bundle_type')
                                    ->live()
                                    ->label(__('bundles.type'))
                                    ->options([
                                        'fixed_price' => __('bundles.type.fixed_price'),
                                        'buy_x_get_y' => __('bundles.type.buy_x_get_y'),
                                    ])
                                    ->required()
                                    ->afterStateUpdated(fn (Set $set) => $set('discount_price', null)), // Reset discount price when type changes

        TextInput::make('buy_x')
            ->live()
            ->label(__('bundles.buy_x'))
            ->numeric()
            ->visible(fn (Get $get) => $get('bundle_type') === 'buy_x_get_y')
            ->afterStateUpdated(fn (Set $set, Get $get) => $this->updateDiscountPrice($set, $get)),

        TextInput::make('get_y')
            ->live()
            ->label(__('bundles.get_y_free'))
            ->numeric()
            ->visible(fn (Get $get) => $get('bundle_type') === 'buy_x_get_y')
            ->afterStateUpdated(fn (Set $set, Get $get) => $this->updateDiscountPrice($set, $get)),

        Hidden::make('products')
            ->default(fn () => $this->getOwnerRecord()->id)
            ->visible(fn (Get $get) => $get('bundle_type') !== 'buy_x_get_y'),

        Select::make('products')
            ->live()
            ->required()
            ->preload()
            ->searchable()
            ->maxItems(fn (Get $get) => $get('bundle_type') === 'buy_x_get_y' ? 1 : 10)
            ->label(__('bundles.products'))
            ->multiple()
            ->relationship('products', 'name')
            ->rules([
                fn (Get $get): Closure => function (string $attribute, $value, Closure $fail) {
                    $ownerId = $this->getOwnerRecord()->id;
                    if (!in_array($ownerId, (array) $value)) {
                        $fail(__('The selected products must include the current product you are editing: :name.', [
                            'name' => $this->getOwnerRecord()->name
                        ]));
                    }
                }
            ])
            ->visible(fn (Get $get) => $get('bundle_type') === 'fixed_price'),

                                TextInput::make('discount_price')
                                    ->live()
                                    ->label(__('bundles.discount_price'))
                                    ->numeric()
                                    ->visible(fn (Get $get) => $get('bundle_type') !== null)
                                    ->disabled(fn (Get $get) => $get('bundle_type') === 'buy_x_get_y' && $get('buy_x') !== null && $get('get_y') !== null)
                                    ->dehydrated() // Ensures value is saved even if disabled
                                    ->afterStateUpdated(fn (Set $set, Get $get) => $this->handleDiscountUpdated($set, $get)),

                            ]),

                        // Special Prices Tab
                        Forms\Components\Tabs\Tab::make(__('bundles.special_prices'))
                            ->schema([
                                Forms\Components\Repeater::make('specialPrices')
                                    ->label(__('bundles.special_prices'))
                                    ->relationship('specialPrices')
                                    ->columns(2)
                                    ->schema([
                                        Forms\Components\Placeholder::make('country_or_group_info')
                                            ->label(__('country_or_group_info'))
                                            ->content(__('messages.select_country_or_group'))
                                            ->columnSpanFull(),

                                        Forms\Components\Select::make('country_id')
                                            ->label(__('fields.select_country'))
                                            ->relationship('country', 'name')
                                            ->nullable()
                                            ->live()
                                            ->afterStateUpdated(fn (Forms\Set $set) => $set('country_group_id', null))
                                            ->hidden(fn (Forms\Get $get) => filled($get('country_group_id')))
                                            ->disableOptionsWhenSelectedInSiblingRepeaterItems(),

                                        Forms\Components\Select::make('country_group_id')
                                            ->label(__('fields.select_country_group'))
                                            ->relationship('countryGroup', 'name')
                                            ->preload()
                                            ->createOptionForm([
                                                Forms\Components\TextInput::make('name')
                                                    ->label(__('name'))
                                                    ->required()
                                                    ->maxLength(255),
                                                Forms\Components\Select::make('countries')
                                                    ->label(__('countries'))
                                                    ->relationship('countries', 'name')
                                                    ->multiple()
                                                    ->searchable()
                                                    ->preload(),
                                            ])
                                            ->nullable()
                                            ->live()
                                            ->afterStateUpdated(fn (Forms\Set $set) => $set('country_id', null))
                                            ->hidden(fn (Forms\Get $get) => filled($get('country_id')))
                                            ->disableOptionsWhenSelectedInSiblingRepeaterItems(),

                                        Forms\Components\Select::make('currency_id')
                                            ->label(__('fields.currency'))
                                            ->relationship('currency', 'name')
                                            ->required(),

                                        Forms\Components\TextInput::make('special_price')
                                            ->label(__('bundles.special_price'))
                                            ->numeric()
                                            ->required(),

                                        Forms\Components\TextInput::make('special_price_after_discount')
                                            ->lt('special_price')
                                            ->label(__('bundles.after_discount_price'))
                                            ->numeric()
                                            ->nullable(),
                                    ])->columnSpanFull()
                                    ->defaultItems(0),
                            ]),
                    ]),
            ]);
    }

    public function table(Table $table): Table
    {
        return $table
            ->headerActions([
                // ...
                Tables\Actions\LocaleSwitcher::make(),
            ])
            ->defaultSort('bundles.id', 'desc')
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->label(__('bundles.name'))
                    ->searchable(),  //name_for_admin

                Tables\Columns\TextColumn::make('name_for_admin')
                    ->label(__('bundles.name_for_admin'))
                    ->searchable(),  //name_for_admin

                Tables\Columns\TextColumn::make('products.name')
                    ->label(__('bundles.products'))
                    ->placeholder('-')
                    ->limitList(2)
                    ->badge(),
                Tables\Columns\TextColumn::make('bundle_type')
                    ->badge()
                    ->label(__('bundles.type')),
                Tables\Columns\TextColumn::make('discount_price')
                    ->placeholder('-')
                    ->label(__('bundles.discount_price'))
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('buy_x')
                    ->placeholder('-')
                    ->label(__('bundles.buy_x'))
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('get_y')
                    ->label(__('bundles.get_y_free'))
                    ->numeric()
                    ->sortable()
                    ->placeholder(fn ($record) => $record->buy_x ? __('bundles.discount_price') : '-'),

                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->headerActions([
                Tables\Actions\CreateAction::make(),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }
}
