<?php

namespace App\Filament\Resources;

use App\Filament\Resources\TransactionResource\Pages;
use App\Models\Transaction;
use Filament\Forms;
use Filament\Forms\Components\Select;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Model;

class TransactionResource extends Resource
{
    protected static ?string $model = Transaction::class;

    protected static ?string $navigationIcon = 'heroicon-o-presentation-chart-line';

    public static function getNavigationGroup(): ?string
    {
        return __('Stock Management'); //Products Management
    }

    public static function getNavigationLabel(): string
    {
        return __('transaction'); // TODO: Change the autogenerated stub
    }

    public static function getModelLabel(): string
    {
        return __('transaction'); // TODO: Change the autogenerated stub
    }

    /**
     * @return string|null
     */
    public static function getPluralLabel(): ?string
    {
        return __('transaction'); // TODO: Change the autogenerated stub
    }

    public static function getLabel(): ?string
    {
        return __('transaction'); // TODO: Change the autogenerated stub
    }

    public static function getPluralModelLabel(): string
    {
        return __('transaction'); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make()->schema([
                    Forms\Components\Select::make('product_id')
                        ->searchable()
                        ->relationship('product', 'name')
                        ->label(__('Product'))
                        ->required(),
                    Select::make('type')
                        ->label(__('Type')) // Label translation
                        ->options([
                            'purchase' => __('Purchase'),
                            'sale' => __('Sale'),
                            'restock' => __('Restock'),
                        ])
                        ->native(false) // Enable JavaScript select
                        ->required(),
                    Forms\Components\TextInput::make('quantity')
                        ->label(__('Quantity'))
                        ->required()
                        ->numeric(),

                    Forms\Components\Textarea::make('notes')
                        ->label(__('Notes'))
                        ->nullable(),
                ])->columns(1)
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('product.name')
                    ->formatStateUsing(function ($record) {
                        return $record->product->name.' (#'.$record->product_id.')';
                    })
                    ->label(__('Product'))
                    ->sortable(),
                Tables\Columns\TextColumn::make('type')
                   ->badge()
                    ->label(__('Type')),
                Tables\Columns\TextColumn::make('quantity')
                    ->label(__('Quantity'))
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('notes')
                    ->label(__('Notes')),

                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->actions([
            ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListTransactions::route('/'),
            'create' => Pages\CreateTransaction::route('/create'),
        ];
    }

    public static function canDelete(Model $record): bool
    {
        return false;
    }
}
