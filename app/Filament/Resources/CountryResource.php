<?php

namespace App\Filament\Resources;

use App\Filament\Resources\CountryResource\Pages\ManageCountries;
use App\Models\Country;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Concerns\Translatable;
use Filament\Resources\Resource;
use Filament\Support\Enums\ActionSize;
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;

class CountryResource extends Resource
{
    use Translatable;

    protected static ?string $model = Country::class;

    protected static ?string $navigationIcon = 'heroicon-o-flag';

    protected static ?int $navigationSort = 1;

    public static function getNavigationLabel(): string
    {
        return __('countries'); // TODO: Change the autogenerated stub
    }

    public static function getModelLabel(): string
    {
        return __('countries'); // TODO: Change the autogenerated stub
    }

    public static function getNavigationGroup(): ?string
    {
        return __('Countries Management'); //Products Attributes Management
    }

    /**
     * @return string|null
     */
    public static function getPluralLabel(): ?string
    {
        return __('countries'); // TODO: Change the autogenerated stub
    }

    public static function getLabel(): ?string
    {
        return __('countries'); // TODO: Change the autogenerated stub
    }

    public static function getPluralModelLabel(): string
    {
        return __('countries'); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form->schema([
            TextInput::make('name')
                ->columnSpanFull()
                ->label(__('name'))
                ->required()
                ->unique(ignoreRecord: true)
                ->maxLength(255),
        ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns(self::getTableColumns())
            ->actions(self::getTableActions())
            ->bulkActions(self::getTableBulkActions());
    }

    private static function getTableColumns(): array
    {
        return [
            TextColumn::make('id')
                ->label(__('id'))
                ->searchable()
                ->sortable(),

            TextColumn::make('name')
                ->label(__('name'))
                ->searchable()
                ->sortable(),

            TextColumn::make('created_at')
                ->label(__('category.created_at'))
                ->dateTime()
                ->sortable(),

            TextColumn::make('updated_at')
                ->label(__('category.updated_at'))
                ->dateTime()
                ->sortable(),
        ];
    }


    private static function getTableActions(): array
    {
        return [
                ViewAction::make(),
                EditAction::make()->color('primary'),
                DeleteAction::make(),
        ];
    }

    private static function getTableBulkActions(): array
    {
        return [
            BulkActionGroup::make([
                DeleteBulkAction::make(),
            ]),
        ];
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist->schema(self::getInfolistSchema())->columns(1)->inlineLabel();
    }

    private static function getInfolistSchema(): array
    {
        return [
            TextEntry::make('id')->label(__('id')),
            TextEntry::make('name')->label(__('name')),
            TextEntry::make('created_at')->label(__('category.created_at'))->dateTime(),
            TextEntry::make('updated_at')->label(__('category.updated_at'))->dateTime(),
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => ManageCountries::route('/'),
        ];
    }
}
